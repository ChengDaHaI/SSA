# coding=utf-8
# The basic parameters of D-MIMO network
import math
import numpy as np

# The basic parameters of D-MIMO network

if True:
    # In our setting, N' = N, K' = K.
    # the number of transmitter( receiver)
    K = 2
    # the number of antennas of each node
    N = 3 # transmitter
    M = 3 # receiver
    # the number of spatial stream of each node
    L_node = [3,2]

    # size of finite field
    q = 3
    # the total energy
    E_total = 1e4
    N_0 = 1

    # NC generator matrix
    G = np.array([[1, 0, 0, 1, 0],
                  [0, 1, 0, 0, 1],
                  [0, 0, 1, 0, 0],
                  [0, 0, 1, 1, 0],
                  [1, 0 ,0, 0, 1]])
    G_extra = np.array([[0,1,0,0,0]])

    # test IA
    # L_node = [2, 1]
    # G = np.array([[1,0,0],[0,1,0],[0,0,1]])
    # G_extra = np.array([[0,0,1],[1,0,0],[0,1,0]])

    # the number of total spatial stream
    L = sum(L_node)

    '''
            [1, 0, 0, 1, 0],  # 1 Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 1, 0],  # 2 Not
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],  # 3 Not
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],  # 4 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 1, 0],  # 5 Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 1, 0],  # 6 Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],  # 7 Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],  # 8 Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 9 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 10 Not
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 11 Not
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 12 yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],

    '''

    G_2Full = np.array(
        [
            [1, 0, 0, 1, 0],  # 1 Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],  # 4 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 9 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 12 yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
        ]
    )

    '''
    shang mian de bian xin.
        [1, 0, 0, 1, 0],  # 1 Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],
            [1, 0, 0, 1, 0],  # 1 Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],  # 4 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 4 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],  # 9 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],
            [1, 0, 0, 0, 0],  # 9 Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0],  # 12 yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 1, 0],
            [1, 0, 0, 0, 0],  # 12 yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],

    '''

    '''
    G_2Full_2 = np.array(
        [
            [1, 0, 0, 1, 0],  # 1 1 No
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 1, 0],  # 1 2Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 1, 0],  # 1 3 No
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 1, 0],  # 1 4No
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 0, 1],  # 3 1Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 0, 1],  # 3 2Not
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 3 3Not
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 3 4Not
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 1, 0],  # 5 1Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 1, 0],  # 5 2Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 1, 0],  # 5 3Yes
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 1, 0],  # 5 4Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 0, 1],  # 7 1Not
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 1],  # 7 2Yes
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 7 3No
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 7 4Yes
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 0, 0],  # 9 1Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 9 2No
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 0],  # 9 3Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 0],  # 9 4Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 0, 0],  # 11 1Not
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 11 2Not
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 0],  # 11 3Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 0],  # 11 4Not
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
        ]
    )
    '''
    # full rank G matrix, with G^2 可变的，即可交换行。因此，满秩的矩阵数需乘以3
    G_2Full_2 = np.array(
        [
            [1, 0, 0, 1, 0],  # 1 2Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 3 1Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 1, 0],  # 5 3Yes
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 7 2Yes
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [1, 0, 0, 0, 0],
            [0, 1, 0, 1, 0],
            [1, 0, 0, 0, 1],  # 7 4Yes
            [0, 1, 0, 0, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 0, 0],  # 9 1Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0],  # 9 4Yes
            [0, 1, 0, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [1, 0, 0, 0, 0],  # 11 3Yes
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 0, 1, 0],
        ]
    )

else:
    # In the setting, N' != N, K' = K.
    # the number of transmitter( receiver)
    K = 3
    # the number of antennas of each node
    N = 6 # transmitter
    M = 3 # receiver
    # the number of source stream of each user
    L_node = [3, 2, 2]
    # the number of received stream of each BS
    L_node_BS = [3, 2, 2]
    # the number of total spatial stream
    L = sum(L_node)
    # size of finite field
    q = 3
    # the total energy
    E_total = 1e4
    N_0 = 1
    # SNR = E_total/(N_0*K)

    # NC generator matrix
    if False:#G_1

        G = np.array([[1, 0, 0, 1, 0, 1, 0],
                      [0, 1, 0, 0, 1, 0, 0],
                      [0, 0, 1, 0, 0, 0, 1],
                      [0, 1, 0, 1, 0, 0, 0],
                      [1, 0, 0, 0, 0, 0, 1],
                      [0, 1, 0, 0, 0, 1, 0],
                      [0, 0, 1, 0, 1, 0, 0]])
        # extra line which indicates the "signal bin"
        G_extra = np.array([[0, 0, 1, 0, 1, 1, 0],
                            [1, 0, 0, 1, 0, 0, 1]])
        '''
        #exchanging row of the last base station
        G = np.array([[1, 0, 0, 1, 0, 1, 0],
                      [0, 1, 0, 0, 1, 0, 0],
                      [0, 0, 1, 0, 0, 0, 1],
                      [0, 1, 0, 1, 0, 0, 0],
                      [1, 0, 0, 0, 0, 0, 1],
                      [0, 1, 0, 0, 0, 1, 0],
                      [1, 0, 0, 1, 0, 0, 1]
                      ])
        # extra line which indicates the "signal bin"
        G_extra = np.array([[0, 0, 1, 0, 1, 1, 0],
                            [0, 0, 1, 0, 1, 0, 0]
                            ])
        '''
    else:#G_2

        G_adjacent = np.array([[1, 0, 0, 1, 0, 1, 0],
                      [0, 1, 0, 0, 1, 0, 0],
                      [0, 0, 1, 0, 0, 0, 1],
                      [0, 0, 1, 1, 0, 0, 0],
                      [0, 1, 0, 0, 1, 1, 0],
                      [1, 0, 0, 0, 1, 1, 0],
                      [0, 0, 1, 0, 0, 0, 0]])
        G_extra = np.array([[1, 0, 0, 0, 0, 0, 1],
                            [0, 1, 0, 1, 0, 0, 1]])

        '''
        # example in Tao's paper
        G = np.array([[1, 0, 0, 1, 0, 1, 0],
                      [0, 1, 0, 0, 1, 0, 0],
                      [0, 0, 1, 0, 0, 0, 1],
                      [0, 1, 0, 0, 1, 0, 1],
                      [1, 0, 0, 1, 0, 0, 0],
                      [1, 0, 0, 0, 1, 0, 0],
                      [0, 1, 0, 0, 0, 1, 0]])
        G_extra = np.array([[0, 0, 1, 0, 0, 1, 0],
                            [0, 0, 1, 1, 0, 0, 1]])
        '''

# check the feasibility of parameters
def check_param_feasible(N,L):
    K_bar = math.ceil(float(L)/N)
    if L >= (M**2 *K_bar / K_bar * M - N):
        raise Exception('The parameters are unachievable!')
    else:
        pass

# index function I(i,l), represent the index of l-th stream of user i
# or the index of l-th received signal at BS i
# The index count from 0!
def index_I(i,l):
    ind = l
    if i > 0:
        for ii in range(i):
            ind = L_node[ii] + ind
    else:
        pass
    return ind

# index inverse function I^{-1}(\tau),
# represent which user the stream with the index belongs
# The index count from 0!
def index_inv(ind):
    i = 0
    ind = ind + 1
    sum_L_node = L_node[i]
    while ind > sum_L_node:
        i = i + 1
        sum_L_node = sum_L_node + L_node[i]
        if ind <= sum_L_node:
            break
        else:
            pass
    return i

# the index of non-zero element of g_{j,l'} ('support element')
# the input l is the l-th received signal at BS
def index_S(G, j, l):
    S = []
    g = G[index_I(j,l)]
    for ii in range(len(g)):
        if g[ii] != 0:
            S.append(ii)
    return S

# the index of stream at BS j which consists of the stream I(i,l)
def index_eta(G,i,l,j):
    eta = None # the column are all zeros
    for ll in range(L_node[j]): # ll is the index of stream in BS j
        if G[index_I(j,ll)][index_I(i,l)] != 0:
            eta = ll
            break
    return eta


if __name__ == '__main__':
    print 'Go!'
    check_param_feasible(N,L)
    print 'rank:',np.linalg.matrix_rank(G),'shape:',G.shape[0]

    print np.array(list(G_2Full) + list(G_2Full_2)).shape
    print 'The NC generator matrix:\n', G
    print index_I(1,1)
    print index_inv(3)
    print index_S(G, 1,1)
    print index_eta(G, 0,1,1)


